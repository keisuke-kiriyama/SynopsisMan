import unittest
import numpy as np

from util import text_processor

class TextTextProcessor(unittest.TestCase):

    def test_wakati(self):
        ref = '8月3日に放送された「中居正広の金曜日のスマイルたちへ」(TBS系)で、1日たった5分でぽっこりおなかを解消するという' \
              'ダイエット方法を紹介。キンタロー。のダイエットにも密着。'
        correct = '8月3日 に 放送 さ れ た 「 中居正広の金曜日のスマイルたちへ 」( TBS 系 ) で 、 1日 たった 5分 で ぽっこり' \
                  ' おなか を 解消 する という ダイエット方法 を 紹介 。 キンタロー。 の ダイエット に も 密着 。 '
        predict = text_processor.wakati(ref)
        self.assertEqual(predict, correct)

    def test_cleaning(self):
        line = 'a\u3000b\nc '
        correct = 'abc'
        predict = text_processor.cleaning(line)
        self.assertEqual(predict, correct)

    def test_get_morph_info(self):
        ref = ['8月3日に放送された「中居正広の金曜日のスマイルたちへ」(TBS系)で、1日たった5分でぽっこりおなかを解消するというダイエット方法を紹介。',
               'キンタロー。のダイエットにも密着。']
        predict = text_processor.get_morph_info(ref)
        correct = [['8月3日', '名詞', '固有名詞', '一般', '*', '*', '*', '8月3日', 'ハチガツミッカ', 'ハチガツミッカ'],
                   ['に', '助詞', '格助詞', '一般', '*', '*', '*', 'に', 'ニ', 'ニ'],
                   ['放送', '名詞', 'サ変接続', '*', '*', '*', '*', '放送', 'ホウソウ', 'ホーソー'],
                   ['さ', '動詞', '自立', '*', '*', 'サ変・スル', '未然レル接続', 'する', 'サ', 'サ'],
                   ['れ', '動詞', '接尾', '*', '*', '一段', '連用形', 'れる', 'レ', 'レ'],
                   ['た', '助動詞', '*', '*', '*', '特殊・タ', '基本形', 'た', 'タ', 'タ'],
                   ['「', '記号', '括弧開', '*', '*', '*', '*', '「', '「', '「'],
                   ['中居正広の金曜日のスマイルたちへ', '名詞', '固有名詞', '一般', '*', '*', '*', '中居正広の金曜日のスマイルたちへ', 'ナカイマサヒロノキンヨウビノスマイルタチヘ', 'ナカイマサヒロノキンヨービノスマイルタチヘ'],
                   ['」(', '記号', '一般', '*', '*', '*', '*', '*'],
                   ['TBS', '名詞', '固有名詞', '一般', '*', '*', '*', 'TBS', 'ティービーエス', 'ティービーエス'],
                   ['系', '名詞', '接尾', '一般', '*', '*', '*', '系', 'ケイ', 'ケイ'],
                   [')', '記号', '一般', '*', '*', '*', '*', '*'],
                   ['で', '助動詞', '*', '*', '*', '特殊・ダ', '連用形', 'だ', 'デ', 'デ'],
                   ['、', '記号', '読点', '*', '*', '*', '*', '、', '、', '、'],
                   ['1日', '名詞', '固有名詞', '一般', '*', '*', '*', '1日', 'ツイタチ', 'ツイタチ'],
                   ['たった', '副詞', '助詞類接続', '*', '*', '*', '*', 'たった', 'タッタ', 'タッタ'],
                   ['5分', '名詞', '固有名詞', '一般', '*', '*', '*', '5分', 'ゴフン', 'ゴフン'],
                   ['で', '助詞', '格助詞', '一般', '*', '*', '*', 'で', 'デ', 'デ'],
                   ['ぽっこり', '副詞', '一般', '*', '*', '*', '*', 'ぽっこり', 'ポッコリ', 'ポッコリ'],
                   ['おなか', '名詞', '一般', '*', '*', '*', '*', 'おなか', 'オナカ', 'オナカ'],
                   ['を', '助詞', '格助詞', '一般', '*', '*', '*', 'を', 'ヲ', 'ヲ'],
                   ['解消', '名詞', 'サ変接続', '*', '*', '*', '*', '解消', 'カイショウ', 'カイショー'],
                   ['する', '動詞', '自立', '*', '*', 'サ変・スル', '基本形', 'する', 'スル', 'スル'],
                   ['という', '助詞', '格助詞', '連語', '*', '*', '*', 'という', 'トイウ', 'トユウ'],
                   ['ダイエット方法', '名詞', '固有名詞', '一般', '*', '*', '*', 'ダイエット方法', 'ダイエットホウホウ', 'ダイエットホウホー'],
                   ['を', '助詞', '格助詞', '一般', '*', '*', '*', 'を', 'ヲ', 'ヲ'],
                   ['紹介', '名詞', 'サ変接続', '*', '*', '*', '*', '紹介', 'ショウカイ', 'ショーカイ'],
                   ['。', '記号', '句点', '*', '*', '*', '*', '。', '。', '。'],
                   ['キンタロー。', '名詞', '固有名詞', '一般', '*', '*', '*', 'キンタロー。', 'キンタロー', 'キンタロー'],
                   ['の', '助詞', '連体化', '*', '*', '*', '*', 'の', 'ノ', 'ノ'],
                   ['ダイエット', '名詞', 'サ変接続', '*', '*', '*', '*', 'ダイエット', 'ダイエット', 'ダイエット'],
                   ['に', '助詞', '格助詞', '一般', '*', '*', '*', 'に', 'ニ', 'ニ'],
                   ['も', '助詞', '係助詞', '*', '*', '*', '*', 'も', 'モ', 'モ'],
                   ['密着', '名詞', 'サ変接続', '*', '*', '*', '*', '密着', 'ミッチャク', 'ミッチャク'],
                   ['。', '記号', '句点', '*', '*', '*', '*', '。', '。', '。']]
        self.assertEqual(predict, correct)

    def test_remove_stop_word(self):
        ref = '8月3日に放送された「中居正広の金曜日のスマイルたちへ」(TBS系)で、1日たった5分でぽっこりおなかを解消するという' \
              'ダイエット方法を紹介。キンタロー。のダイエットにも密着。'
        predict = text_processor.remove_stop_word(ref)
        correct = ['8月3日', '放送', 'さ', 'れ', '中居正広の金曜日のスマイルたちへ', 'TBS', '系', '1日', 'たった', '5分',
                   'ぽっこり', 'おなか', '解消', 'する', 'ダイエット方法', '紹介', 'キンタロー。', 'ダイエット', '密着']
        self.assertEqual(predict, correct)

    def test_get_BoW_vectors(self):
        contents_lines = ['8月3日に放送された「中居正広の金曜日のスマイルたちへ」(TBS系)で、1日たった5分でぽっこりおなかを解消するというダイエット方法を紹介。',
                          'キンタロー。のダイエットにも密着。']
        synopsis_lines = ['キンタロー。のダイエットにも密着。']
        predict_cv, predict_sv = text_processor.get_BoW_vectors(contents_lines, synopsis_lines)
        correct_cv = [np.array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0.]),
                      np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.])]
        correct_sv = [np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.])]
        is_equal_cv = np.array_equal(predict_cv, correct_cv)
        is_equal_sv = np.array_equal(predict_sv, correct_sv)
        self.assertTrue(is_equal_cv)
        self.assertTrue(is_equal_sv)

    def test_cos_sim(self):
        v1 = np.array([0,0,0])
        v2 = np.array([1,1,1])
        correct = 0
        predict  = text_processor.cos_sim(v1, v2)
        self.assertAlmostEqual(predict, correct)

        v1 = np.array([0,0,0])
        v2 = np.array([0,0,0])
        correct = 0
        predict = text_processor.cos_sim(v1, v2)
        self.assertAlmostEqual(predict, correct)

        v1 = np.array([1,1,1])
        v2 = np.array([1,1,1])
        correct = 1
        predict = text_processor.cos_sim(v1, v2)
        self.assertAlmostEqual(predict, correct)


if __name__ == '__main__':
    unittest.main()
